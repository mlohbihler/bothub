// import { maxTurn } from '../actuators'
import Resource from './resource'

// A weird kind of resource. Fatigue is generated by using too much speed over a prolonged period of
// time. There is not notion of ingestion.
export default class Fatigue extends Resource {
  colour = '#80b'
  amount = 0

  updateSensors() {
    const { amount, sensors } = this
    if (amount > 500) sensors.fatigue = 5
    else if (amount > 400) sensors.fatigue = 4
    else if (amount > 300) sensors.fatigue = 3
    else if (amount > 200) sensors.fatigue = 2
    else if (amount > 100) sensors.fatigue = 1
  }

  updateActuators() {
    const { amount, actuators } = this
    if (amount > 700) actuators.clampSpeed(0.25)
    else if (amount > 500) actuators.clampSpeed(0.7)
    else if (amount > 300) actuators.clampSpeed(0.8)
    else if (amount > 200) actuators.clampSpeed(0.9)
  }

  metabolize() {
    const {
      actuators: { speed },
    } = this

    // By default there is no fatigue change
    let a = 0
    if (speed > 2) {
      // Going too fast increases fatigue.
      a = 2 - speed
    } else if (speed >= -0.01 && speed < 0.5) {
      // Going slow enough, but not backwards, helps recover from fatigue.
      a = (1 - speed) / 10
    }

    super.metabolize(a)
  }

  isUnconscious() {
    return false
  }

  isDead() {
    return false
  }
}
